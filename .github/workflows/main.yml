name: Build
on:
  push:
  pull_request:
  workflow_dispatch:

env:
  AWS_CDN_ACCESS_KEY_ID:  ${{ secrets.AWS_CDN_ACCESS_KEY_ID }}
  AWS_CDN_SECRET_KEY: ${{ secrets.AWS_CDN_SECRET_KEY }}

jobs:
  tests:
    name: tests
    runs-on: ubuntu-latest
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          persist-credentials: true

      - uses: actions/setup-node@v2
        with:
          node-version: '11'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache dependencies
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - run: yarn --frozen-lockfile

      - name: install rclone
        run: curl https://rclone.org/install.sh | sudo bash

      - name: tests
        #if: github.ref != 'refs/heads/develop' and github.ref != 'refs/heads/master'
        run: |
          set -e
          npm run lint
          npm run test
          npm run build
          npm run coverage:publish  

  deploy-tst:
    name: deploy-tst
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          persist-credentials: true

      - uses: actions/setup-node@v2
        with:
          node-version: '11'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache dependencies
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - run: yarn --frozen-lockfile

      - name: install rclone
        run: curl https://rclone.org/install.sh | sudo bash

      - name: deploy-tst
        run: |
          set -e
          npm run build
          rclone copy dist :s3://cdn.pay.super.com/paysdk/dev/ \
            --s3-access-key-id=$AWS_CDN_ACCESS_KEY_ID \
            --s3-secret-access-key=$AWS_CDN_SECRET_KEY --s3-region=eu-west-1
          npm run coverage:publish

  deploy-stg:
    name: deploy-stg
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          persist-credentials: true

      - uses: actions/setup-node@v2
        with:
          node-version: '11'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache dependencies
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - run: yarn --frozen-lockfile

      - name: install rclone
        run: curl https://rclone.org/install.sh | sudo bash

      - name: deploy-stg
        run: |
          set -e
          npm run build-stage
          rclone copy dist :s3://cdn.pay.super.com/paysdk/stage/ \
            --s3-access-key-id=$AWS_CDN_ACCESS_KEY_ID \
            --s3-secret-access-key=$AWS_CDN_SECRET_KEY --s3-region=eu-west-1
          npm run coverage:publish

  deploy-release:
    name: deploy-release
    runs-on: ubuntu-latest
    needs: tests
    if: startsWith(github.ref, 'refs/tags/v') && github.event_name == 'push'
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          persist-credentials: true

      - uses: actions/setup-node@v2
        with:
          node-version: '11'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache dependencies
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
            
      - run: yarn --frozen-lockfile

      - name: install rclone
        run: curl https://rclone.org/install.sh | sudo bash

      - name: release
        run: |
          set -e
          npm run build-release
          rclone -vv copy dist :s3://cdn.pay.super.com/paysdk/latest/ \
            --s3-access-key-id=$AWS_CDN_ACCESS_KEY_ID \
            --s3-secret-access-key=$AWS_CDN_SECRET_KEY --s3-region=eu-west-1
          rclone -vv copy dist :s3://cdn.pay.super.com/paysdk/${GITHUB_REF##*/} \
            --s3-access-key-id=$AWS_CDN_ACCESS_KEY_ID \
            --s3-secret-access-key=$AWS_CDN_SECRET_KEY --s3-region=eu-west-1
          npm run coverage:publish

  slack-notification:
    needs: [tests, deploy-tst, deploy-stg, deploy-release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Slack Workflow Notification
        uses: paysuper/slack-workflow-status@118b3b43993d447a1a5cd7fddf5a1235ab219b18
        with:
          repo_token: ${{secrets.GITHUB_TOKEN}}
          slack_webhook_url: ${{secrets.SLACK_WEBHOOK_URL}}

